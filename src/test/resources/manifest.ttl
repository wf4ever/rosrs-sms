# Example Research Object aggregation using OAI-ORE

@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix ore: <http://www.openarchives.org/ore/terms/> .

@prefix ro: <http://example.wf4ever-project.org/2011/ro/core#> .
@prefix rel: <http://example.wf4ever-project.org/2011/ro/relations#> .
@prefix ao: <http://purl.org/ao/core/> .


# Note - in actual representation the URIs might be relative,
# absolute or both (linked using owl:sameAs or ro:availableAs).
# For this example all URIs are absolute.

@base <http://example.org/ROs/ro1/> .

# We'll assume the resource behind this example representation is called "manifest"
@prefix : <manifest#> .


# Description of authors out of scope for this example and would typically be
# separate resources, but using FOAF is probably a good start.
_:stian a foaf:Agent ;
	foaf:name "Stian Soiland-Reyes"@en .

_:jits a foaf:Agent ;
	foaf:name "Jiten Bhagat"@en .


# The resource describing the research object (ie. serialisation)
<manifest> a ore:ResourceMap ;
	ore:describes :ro ;
	dcterms:created "2011-07-14T15:01:14Z"^^xsd:dateTime ;
	dcterms:creator _:stian .


# The research object == the aggregation
:ro a ro:ResearchObject, ore:Aggregation ;
	ore:aggregates <http://example.com/workflow.scufl2>, <input.txt>, <output.txt> ;
	ore:isDescribedBy <manifest> ;
	dcterms:created "2011-07-14T15:01:13Z"^^xsd:dateTime ;
	dcterms:creator _:stian .

# Proxies for the three resources - these represent
# the resources in the context of this research object
:workflowProxy a ore:Proxy ;
	ore:proxyFor <http://example.com/workflow.scufl2>;
	ore:proxyIn :ro .

:inputProxy a ore:Proxy ;
	ore:proxyFor <input.txt> ;
	ore:proxyIn :ro .

:outputProxy a ore:Proxy ;
	ore:proxyFor <output.txt> ;
	ore:proxyIn :ro .

# Non-annotational metadata about the resources.  These are pure facts which we
# can't dispute and don't need to know who asserted. 
#
# The imaginary ro: namespace here provides file-like metadata.
# 
# Note: As this is an example mainly covering annotations and ORE, it is not
# detailing issues such as web resources having multiple representations, that
# they might change over time, etc.  We then probably need to use some kind of
# indirection and/or possibly oac:when / oac:TimeConstraint 
<http://example.com/workflow.scufl2> a ro:Resource ;
	ro:name "workflow.scufl2" ;
	ro:fileSize "422323"^^xsd:longint.	

<input.txt> a ro:Resource ;
	ro:name "input.txt" ;
	ro:fileSize "14"^^xsd:longint ;	
	ro:checksum <urn:sha1:YNCKHTQCWBTRNJIV4WNAE52SJUQCZO5C> .

<output.txt> a ro:Resource ;
	ro:name "output.txt" ;
	ro:fileSize "2344"^^xsd:longint ;	
	ro:checksum <urn:sha1:KHTQCWBTRNJIV4WNAE52SJUQCZO5CYNC> .

# Annotations are found in a separate resource 
:ro rdfs:seeAlso <annotations> .
<annotations> ao:annotatesResource :ro .

